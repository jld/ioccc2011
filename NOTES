A D T F

C: F=*(T=F); *T--=D; *(D=T)=A;
U: A=*D++; D=*D;
F: T=*++D; *D--=F; A=*(F=D); D=T;
L(v): A=D; D=v;
S(v): v=D; D=A;
R: D=A;
M: D-=A;
Z(l): if (!D) goto l;

J(l): R M Z(l)
SJ(v,l): S(v) M Z(l)
VC(v): L(v) C S(v)
VF(v): L(v) F S(v)

X: T=*++D; *D--=A; A=T;
// T=A; A=*++D; *D--=T;

S(tmp) U U L(tmp) X C VC(trail)
VF(trail) F X

b: L(marks) U R L(trail) M Z(e) VF(trail) F X J(b) e: VF(marks)
b: L(m) U R L(t) M Z(e) VF(t) F X J(b) e: VF(m)
b:L(m)URL(t)MZ(e)VF(t)FXJ(b)e:VF(m)
b:LmURLtMZeLtFtSFXJle:LmFmS

====

#define Z ; if (A == D) goto
#define C ; *(T = G) =D ++; D -= (G =* -- T) ||! (G = calloc(2, sizeof(T))); \
            *T ++ = A; G -= *T --- D; D = T;
#define F ; A =* D; *D = G; D =* (G =++ D);
#define U ; A =* D ++; D =* D;
#define L ; A = D; D =
#define S     = D; D = A;
#define X ; T = A; A =* ++D; *D --= T;

#define J; D S Z



mklit: C x S L x C L x X

jmpfalse: U Z
jmptrue: U U Z

assign: U L T S U D S L T X C L trail C trail S



Hey kids, circular lists:

s: L i U L i Z unit
L i L h S n: U U D S stuff L i U L i S L h Z e D S Z n e:

del: L i U U L i X C L trail C trail S D S Z s

ins: /*o S*/ L h U T S L o L T C L h X

Except that doesn't work, because the clause->literal needs something
that won't be deleted.  (And it's ugly for the clause list, too.)

b: L i U U Z e; D S stuff L i U i S Z b;
d: L i U U L i X C L trail C trail S Z b;
e:

n:      L M U Z e; T S L H Z m L H F H S F X T S Z n;
m:	L M F M S Z r


for c in p:
  for l in c:
    U Z d1 U Z d0
  L c U U Z unsat L T S U Z next L T U T S [assign] J d0

L old L new Z bees; old S Z top

L p U U Z sat [guess]

====

Big Idea: Macro-expand the 3^6 loop.  CBs for begin/atom/enter, w/ level.

Less Big Idea: Choose random literal by choosing random 2-clause, then
flip for which and negate.

====

0: add "random" literal; save; run once
0/unsat: revert; retract; 0
0/sat: 2
0/bees: 1
1: save; run fully
1/unsat: revert; as 0/unsat
1/sat: 2
1/bees: 1'
2: add co-solution; run fully
2/unsat: revert; done
2/sat: revert; go 0

====

So, macros.

push nil, [(next thing), cons]*3, nothing
nothing, [uncons, (next thing)]*3, drop

  "cons": L l F x=A F l S A=x C L l C l S
"uncons": L l F l S U x=A L l C A=x C l S

#define E(T,B) ; T = A B A = T; 

  "cons": L l F E(x, F l S) C L l C l S
"uncons": L l F l S U E(x, L l C) C l S

   "lit": L l C l S
  "drop": L l F l S

A = push nil
B = push nil
N = drop; push atom
E = cons

B = uncons
N = use but leave
E = drop
Z = drop

L N L N C a S

====

...hell.  I can't use macros for this.  Now what.  Main recursion!
Make argc be an index of the desired thing.  Like, 0-6 for first loop
nest, 7-13 for the next, &c.  Then factor stuff out and data-drive it.

Also, C F ... L G U L n C n S.  

Start with something simple:

   0:           L N put, rec(n+1)*3, get, x S, prn(x)   // 0+2
1..5: get, x S, L N put, rec(n+1)*3, get, L x C put     // 1+2
   6: get, x S,      mkatom,              L x C put     // 1+0

====

Okay, multiple arguments.

L a C L b C F T S F

L G U gets the first, but need C L G U to get the second.

iter1: get U x S put, rec(n+1)*3, L x put
iter2: get U C y S, get U x S put, L y F y S put, rec(n+1)*3,
       L y C y S, L x put, L y F

leaf: instead of put rec*3; a S xget L b S U c S L a L c C L b X
 But can I make this worse?  With last list on stack,
 get L a S U C b S L a F L l L b C or something.

Except all of this is horribly broken; iter1 needs to reset the thing
if the callee destroys it as iter2.  Let's try again.  Tupled?

L x L y C put
get F y S x S

iter2: (L y U y S L x U x S L T C C F recurse)*3
iter1: (L y       L x U x S L T C C F recurse)*3
leaf: L y U L x U L T C L y X


ep-none, n-rec-get
ep-1xC, n-rec-get
ep-1xC, mkatom
ep-1xC, mkcls

-------------
ep-2xy, leaf
ep-2xy, iter1
ep-2xy, iter2

Alternative: A = atom, D = clause.
a S L a U /* T = atom, A = junk, D = ccdr */
L T U L T /* T = ccdr, A = junk, D = !atom */
C L a X
Could replace C F recurse with this.

get F y S (stuff | put rec*3) L y put

ep-1xF, put-rec
ep-1xF, docover


THING: awk '/atom/{if(!a[$1]){a[$1]=++x;a[$2]=-x}$0=$0" "a[$1]}{print}'